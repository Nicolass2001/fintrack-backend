// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id         String          @id @default(uuid())
  email      String          @unique
  password   String
  name       String
  // Selected currency for the user
  // This is used to display the user's data in the selected currency
  // This change the returned amount of the categories not the account's and transaction's amount
  currencyId Int             @default(1)
  currency   AccountCurrency @relation(fields: [currencyId], references: [id])
  accounts   Account[]
  categories Category[]
  createdAt  DateTime        @default(now())
  updatedAt  DateTime        @updatedAt
}

model Account {
  id           String          @id @default(uuid())
  name         String
  transactions Transaction[]
  userId       String
  user         User            @relation(fields: [userId], references: [id])
  currencyId   Int             @default(1)
  currency     AccountCurrency @relation(fields: [currencyId], references: [id])
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt

  @@unique([name, userId])
}

// Account Currency
// 1 - USD
// 2 - UYU
model AccountCurrency {
  id         Int       @id @default(autoincrement())
  name       String
  symbol     String
  multiplier Float
  accounts   Account[]
  users      User[]
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
}

model Transaction {
  id          String          @id @default(uuid())
  amount      Float
  description String
  date        DateTime
  typeId      Int
  type        TransactionType @relation(fields: [typeId], references: [id])
  accountId   String
  account     Account         @relation(fields: [accountId], references: [id])
  categoryId  String
  category    Category        @relation(fields: [categoryId], references: [id])
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
}

// Transaction Type
// 1 - Income
// 2 - Expense
model TransactionType {
  id           Int           @id
  name         String
  transactions Transaction[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
}

model Category {
  id           String        @id @default(uuid())
  name         String
  transactions Transaction[]
  userId       String
  user         User          @relation(fields: [userId], references: [id])
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt

  @@unique([name, userId])
}